# model age similarity
boys_age_bowtie <- bow_tie(boys_age, center_value = 10)
boys_age_bowtie <- scale_matrix(boys_age_bowtie)
diag(boys_age_bowtie) <- round(1, digits = 0)
# give some strings for rownames names
boy_index2use = NA
for (i in 1:nrow(boys_age_bowtie)){
boy_index2use[i] <- paste0("boy_", i)
}
rownames(boys_age_bowtie) <- boy_index2use
girls_age_bowtie <- bow_tie(girls_age, center_value = 10)
girls_age_bowtie <- scale_matrix(girls_age_bowtie)
diag(girls_age_bowtie) <- round(1, digits = 0)
# give some strings for rownames names
girl_index2use = NA
for (i in 1:nrow(girls_age_bowtie)){
girl_index2use[i] <- paste0("girl_", i)
}
rownames(girls_age_bowtie) <- girl_index2use
# write out to results for plotting in reticulate
write.csv(boys_age_bowtie,
file.path(resultpath, "boys_age_bowtie.csv"),
row.names=FALSE)
write.csv(girls_age_bowtie,
file.path(resultpath, "girls_age_bowtie.csv"),
row.names=FALSE)
reticulate::repl_python()
# give some strings for rownames names
boy_index2use = NA
for (i in 1:nrow(boys_age_ranked_df)){
boy_index2use[i] <- paste0("boy_", i)
}
# give some strings for rownames names
girl_index2use = NA
for (i in 1:nrow(girls_age_ranked_df)){
girl_index2use[i] <- paste0("girl_", i)
}
# compute similarity on single value output
compute_single_variable_similarity <- function(single_v_data,
subids,
name2use,
resultpath,
save_out){
matrix_similarity = data.frame()
for (i in 1:length(single_v_data)){
for (j in 1:length(single_v_data)){
data_i = single_v_data[[i]]
data_j = single_v_data[[j]]
abs_diff = abs(data_i - data_j)
matrix_similarity[i, j] = abs_diff
}}
matrix_scaled = 1 - scale_matrix(matrix_similarity)
rownames(matrix_scaled) = subids
colnames(matrix_scaled) = subids
saveoutfilename <- paste0(name2use, ".csv")
saveoutfilepath <- file.path(resultpath,
saveoutfilename)
if (save_out == TRUE){
write.csv(matrix_scaled, saveoutfilepath, row.names=FALSE)}
return(as.matrix(matrix_scaled))
}
View(boys_age_ranked_df)
boys_height_similarity <- compute_single_variable_similarity(
boys_age_ranked_df$Mean.Height..urban.,
boy_index2use,
"boy_urban_height_similarity",
resultpath,
TRUE
)
girls_height_similarity <- compute_single_variable_similarity(
girls_age_ranked_df$Mean.Height..urban.,
girl_index2use,
"girl_urban_height_similarity",
resultpath,
TRUE
)
reticulate::repl_python()
# model age bow tie similarity
boys_age_nn <- nearest_neighbours(boys_age)
boys_age_nn <- scale_matrix(boys_age_nn)
diag(boys_age_nn) <- round(1, digits = 0)
rownames(boys_age_nn) <- boy_index2use
girls_age_nn <- nearest_neighbours(girls_age)
girls_age_nn <- scale_matrix(girls_age_nn)
diag(girls_age_nn) <- round(1, digits = 0)
rownames(girls_age_nn) <- girl_index2use
# write out to results for plotting in reticulate
write.csv(boys_age_nn,
file.path(resultpath, "boys_age_nn.csv"),
row.names=FALSE)
write.csv(girls_age_nn,
file.path(resultpath, "girls_age_nn.csv"),
row.names=FALSE)
reticulate::repl_python()
# model age nn similarity
boys_age_nn_bt <- boys_age_nn + boys_age_bowtie
boys_age_nn_bt <- scale_matrix(boys_age_nn_bt)
diag(boys_age_nn_bt) <- round(1, digits = 0)
rownames(boys_age_nn_bt) <- boy_index2use
girls_age_nn_bt <- girls_age_nn + girls_age_bowtie
girls_age_nn_bt <- scale_matrix(girls_age_nn_bt)
diag(girls_age_nn_bt) <- round(1, digits = 0)
rownames(girls_age_nn_bt) <- girl_index2use
# write out to results for plotting in reticulate
write.csv(boys_age_nn_bt,
file.path(resultpath, "boys_age_nn_bt.csv"),
row.names=FALSE)
write.csv(girls_age_nn_bt,
file.path(resultpath, "girls_age_nn_bt.csv"),
row.names=FALSE)
reticulate::repl_python()
boys_urban_similarity <- compute_single_variable_similarity(
boys_age_ranked_df$Mean.Height..urban.,
boy_index2use,
"boy_urban_height_similarity",
resultpath,
TRUE
)
girls_urban_similarity <- compute_single_variable_similarity(
girls_age_ranked_df$Mean.Height..urban.,
girl_index2use,
"girl_urban_height_similarity",
resultpath,
TRUE
)
boys_rural_similarity <- compute_single_variable_similarity(
boys_age_ranked_df$Mean.Height..rural.,
boy_index2use,
"boy_rural_height_similarity",
resultpath,
TRUE
)
girls_rural_similarity <- compute_single_variable_similarity(
girls_age_ranked_df$Mean.Height..rural.,
girl_index2use,
"girl_rural_height_similarity",
resultpath,
TRUE
)
reticulate::repl_python()
View(mantel_res_boys)
devtools::install_github("sarahkaarina/similaritymodels")
library(similaritymodels)
devtools::install_github("sarahkaarina/similaritymodels")
library(similaritymodels)
knitr::opts_chunk$set(echo = TRUE)
library(similaritymodels)
library(reticulate)
library(vegan)
library(here)
codepath = here("code")
resultpath = here("results")
datapath = here("data")
plotpath = here("plots")
# compute similarity on single value output
compute_single_variable_similarity <- function(single_v_data,
subids,
name2use,
resultpath,
save_out){
matrix_similarity = data.frame()
for (i in 1:length(single_v_data)){
for (j in 1:length(single_v_data)){
data_i = single_v_data[[i]]
data_j = single_v_data[[j]]
abs_diff = abs(data_i - data_j)
matrix_similarity[i, j] = abs_diff
}}
matrix_scaled = 1 - scale_matrix(matrix_similarity)
rownames(matrix_scaled) = subids
colnames(matrix_scaled) = subids
saveoutfilename <- paste0(name2use, ".csv")
saveoutfilepath <- file.path(resultpath,
saveoutfilename)
if (save_out == TRUE){
write.csv(matrix_scaled, saveoutfilepath, row.names=FALSE)}
return(as.matrix(matrix_scaled))
}
mantel_results_models <- function(x, y, nperm, n_models){
# function takes two separate lists of dataframes as arguments
# where x = list of data frames that model behavioral similarity (4 models)
# and y = list of data frames that model dependent variable similarity
# nperm is the n of permutations you want to run (i.e. 1000)
# n_models is the number of behavioral models you are using FIX ME
# using package vegan for the mantel() function, with spearman method*
# *because distribution of similarity is not parametric
# cit. https://jkzorz.github.io/2019/07/08/mantel-test.html
# NB: switched to the vegan package, because the metan one was defaulting into spearman and there was no way to edit that (we need a non-parametric test)
n_comparisons = length(y)
len_final_df = n_models*n_comparisons
model_res_r <- data.frame()
model_res_p <- data.frame()
rownames_df <- data.frame()
modelname = names(x)
comparisonname = names(y)
for (i in 1:length(x)){
for (j in 1:length(y)){
result_name <- paste0(modelname[i], comparisonname[j])
model2use = x[[i]]
data2use = y[[j]]
model_out = mantel(model2use,
data2use,
method = "spearman",
permutations = nperm,
na.rm = TRUE)
model_res_r <- rbind(model_res_r,
model_out$statistic) # r-value
model_res_p <- rbind(model_res_p,
model_out$signif) # p-value
rownames_df <- rbind(rownames_df, result_name)
}}
colnames(model_res_r) <- "r"
colnames(model_res_p) <- "p_value"
model_res <- cbind(model_res_p, model_res_r)
rownames(model_res) <- rownames_df[[1]]
model_res$p_value_adjusted <- p.adjust(model_res$p_value,
method = "fdr")
return(model_res)
} # end function mantel_results_models
height_df <- read.csv("/Users/scrockford/Library/CloudStorage/OneDrive-FondazioneIstitutoItalianoTecnologia/punctuated_similarity_test/data/NCD_RisC_Nature_2023_height_child_adolescent_global.csv")
boys_height_df <- subset(height_df, height_df$Sex == "Boys")
girls_height_df <- subset(height_df, height_df$Sex == "Girls")
# rank data by age
boys_age_ranked_df <-
boys_height_df[order(boys_height_df$Age.group),]
girls_age_ranked_df <-
girls_height_df[order(girls_height_df$Age.group),]
# give some strings for rownames names
boy_index2use = NA
for (i in 1:nrow(boys_age_ranked_df)){
boy_index2use[i] <- paste0("boy_", i)
}
# give some strings for rownames names
girl_index2use = NA
for (i in 1:nrow(girls_age_ranked_df)){
girl_index2use[i] <- paste0("girl_", i)
}
boys_age <- boys_age_ranked_df$Age.group
girls_age <- girls_age_ranked_df$Age.group
punctuated(boys_age, 11)
knitr::opts_chunk$set(echo = TRUE)
library(similaritymodels)
library(reticulate)
library(vegan)
library(here)
codepath = here("code")
resultpath = here("results")
datapath = here("data")
plotpath = here("plots")
# compute similarity on single value output
compute_single_variable_similarity <- function(single_v_data,
subids,
name2use,
resultpath,
save_out){
matrix_similarity = data.frame()
for (i in 1:length(single_v_data)){
for (j in 1:length(single_v_data)){
data_i = single_v_data[[i]]
data_j = single_v_data[[j]]
abs_diff = abs(data_i - data_j)
matrix_similarity[i, j] = abs_diff
}}
matrix_scaled = 1 - scale_matrix(matrix_similarity)
rownames(matrix_scaled) = subids
colnames(matrix_scaled) = subids
saveoutfilename <- paste0(name2use, ".csv")
saveoutfilepath <- file.path(resultpath,
saveoutfilename)
if (save_out == TRUE){
write.csv(matrix_scaled, saveoutfilepath, row.names=FALSE)}
return(as.matrix(matrix_scaled))
}
mantel_results_models <- function(x, y, nperm, n_models){
# function takes two separate lists of dataframes as arguments
# where x = list of data frames that model behavioral similarity (4 models)
# and y = list of data frames that model dependent variable similarity
# nperm is the n of permutations you want to run (i.e. 1000)
# n_models is the number of behavioral models you are using FIX ME
# using package vegan for the mantel() function, with spearman method*
# *because distribution of similarity is not parametric
# cit. https://jkzorz.github.io/2019/07/08/mantel-test.html
# NB: switched to the vegan package, because the metan one was defaulting into spearman and there was no way to edit that (we need a non-parametric test)
n_comparisons = length(y)
len_final_df = n_models*n_comparisons
model_res_r <- data.frame()
model_res_p <- data.frame()
rownames_df <- data.frame()
modelname = names(x)
comparisonname = names(y)
for (i in 1:length(x)){
for (j in 1:length(y)){
result_name <- paste0(modelname[i], comparisonname[j])
model2use = x[[i]]
data2use = y[[j]]
model_out = mantel(model2use,
data2use,
method = "spearman",
permutations = nperm,
na.rm = TRUE)
model_res_r <- rbind(model_res_r,
model_out$statistic) # r-value
model_res_p <- rbind(model_res_p,
model_out$signif) # p-value
rownames_df <- rbind(rownames_df, result_name)
}}
colnames(model_res_r) <- "r"
colnames(model_res_p) <- "p_value"
model_res <- cbind(model_res_p, model_res_r)
rownames(model_res) <- rownames_df[[1]]
model_res$p_value_adjusted <- p.adjust(model_res$p_value,
method = "fdr")
return(model_res)
} # end function mantel_results_models
height_df <- read.csv("/Users/scrockford/Library/CloudStorage/OneDrive-FondazioneIstitutoItalianoTecnologia/punctuated_similarity_test/data/NCD_RisC_Nature_2023_height_child_adolescent_global.csv")
boys_height_df <- subset(height_df, height_df$Sex == "Boys")
girls_height_df <- subset(height_df, height_df$Sex == "Girls")
# rank data by age
boys_age_ranked_df <-
boys_height_df[order(boys_height_df$Age.group),]
girls_age_ranked_df <-
girls_height_df[order(girls_height_df$Age.group),]
# give some strings for rownames names
boy_index2use = NA
for (i in 1:nrow(boys_age_ranked_df)){
boy_index2use[i] <- paste0("boy_", i)
}
# give some strings for rownames names
girl_index2use = NA
for (i in 1:nrow(girls_age_ranked_df)){
girl_index2use[i] <- paste0("girl_", i)
}
boys_age <- boys_age_ranked_df$Age.group
girls_age <- girls_age_ranked_df$Age.group
# model age bow tie similarity
boys_age_bowtie_raw <- bow_tie(boys_age, center_value = 11)
boys_age_bowtie <- scale_matrix(boys_age_bowtie_raw)
diag(boys_age_bowtie) <- round(1, digits = 0)
rownames(boys_age_bowtie) <- boy_index2use
girls_age_bowtie_raw <- bow_tie(girls_age, center_value = 10)
girls_age_bowtie <- scale_matrix(girls_age_bowtie_raw)
diag(girls_age_bowtie) <- round(1, digits = 0)
rownames(girls_age_bowtie) <- girl_index2use
# write out to results for plotting in reticulate
write.csv(boys_age_bowtie,
file.path(resultpath, "boys_age_bowtie.csv"),
row.names=FALSE)
write.csv(girls_age_bowtie,
file.path(resultpath, "girls_age_bowtie.csv"),
row.names=FALSE)
# model age nn similarity
boys_age_nn_raw <- nearest_neighbours(boys_age)
boys_age_nn <- scale_matrix(boys_age_nn_raw)
diag(boys_age_nn) <- round(1, digits = 0)
rownames(boys_age_nn) <- boy_index2use
girls_age_nn_raw <- nearest_neighbours(girls_age)
girls_age_nn <- scale_matrix(girls_age_nn_raw)
diag(girls_age_nn) <- round(1, digits = 0)
rownames(girls_age_nn) <- girl_index2use
# write out to results for plotting in reticulate
write.csv(boys_age_nn,
file.path(resultpath, "boys_age_nn.csv"),
row.names=FALSE)
write.csv(girls_age_nn,
file.path(resultpath, "girls_age_nn.csv"),
row.names=FALSE)
# model age nn similarity
boys_age_nn_bt <- punctuated(boys_age, center_value = 11)
View(mantel_res_boys)
View(mantel_res_girls)
set.seed(999)
data.frame(girls_age)
knitr::opts_chunk$set(echo = TRUE)
library(similaritymodels)
library(reticulate)
library(vegan)
library(here)
codepath = here("code")
resultpath = here("results")
datapath = here("data")
plotpath = here("plots")
# set random seed
set.seed(999)
plot_boys_age <- ggplot(data.frame(boys_age),
aes(x = boys_age)) + geom_density() +
labs(x = "boys age") + mytheme
library(ggplot2)
plot_boys_age <- ggplot(data.frame(boys_age),
aes(x = boys_age)) + geom_density() +
labs(x = "boys age") + mytheme
plot_boys_age <- ggplot(data.frame(boys_age),
aes(x = boys_age)) + geom_density() +
labs(x = "Boys age")
print(plot_boys_age)
plot_girls_age <- ggplot(data.frame(girls_age),
aes(x = girls_age)) + geom_density() +
labs(x = "Girls age")
print(plot_girls_age)
plot_boys_age <- ggplot(data.frame(boys_age),
aes(x = boys_age)) + geom_histogram() +
labs(x = "Boys age")
print(plot_boys_age)
plot_girls_age <- ggplot(data.frame(girls_age),
aes(x = girls_age)) + geom_histogram() +
labs(x = "Girls age")
print(plot_girls_age)
plot_boys_height <- ggplot(boys_height_df,
aes(x = Mean.Height..urban.)) + geom_density() +
labs(x = "Boys height")
print(plot_boys_height)
plot_girls_height <- ggplot(data.frame(girls_height_df),
aes(x = Mean.Height..urban.)) + geom_density() +
labs(x = "Girls height")
print(plot_girls_height)
urban_height <- ggplot(height_df,
aes(x = Mean.Height..urban., colour = Sex)) +
geom_density() +
labs(x = "urban height")
print(urban_height)
rural_height <- ggplot(height_df,
aes(x = Mean.Height..rural., colour = Sex)) +
geom_density() +
labs(x = "rural height")
print(rural_height)
urban_height <- ggplot(height_df,
aes(x = Mean.Height..urban.,
colour = Sex,
fill = Sex)) +
geom_density() +
labs(x = "urban height")
print(urban_height)
rural_height <- ggplot(height_df,
aes(x = Mean.Height..rural.,
colour = Sex,
fill = Sex)) +
geom_density() +
labs(x = "rural height")
print(rural_height)
urban_height <- ggplot(height_df,
aes(x = Mean.Height..urban.,
colour = Sex,
fill = Sex,
alpha = 0.5)) +
geom_density() +
labs(x = "urban height")
print(urban_height)
rural_height <- ggplot(height_df,
aes(x = Mean.Height..rural.,
colour = Sex,
fill = Sex,
alpha = 0.5)) +
geom_density() +
labs(x = "rural height")
print(rural_height)
urban_height <- ggplot(height_df,
aes(x = Age.group,
y = Mean.Height..urban.,
colour = Sex,
fill = Sex,
alpha = 0.5)) +
geom_point() + geom_smooth(method = "lm")
labs(x = "urban height")
print(urban_height)
rural_height <- ggplot(height_df,
aes(x = Age.group,
y = Mean.Height..rural.,
colour = Sex,
fill = Sex,
alpha = 0.5)) +
geom_point() + geom_smooth(method = "lm")
labs(x = "rural height")
print(rural_height)
urban_height <- ggplot(height_df,
aes(x = Age.group,
y = Mean.Height..urban.,
colour = Sex,
fill = Sex,
alpha = 0.5)) +
geom_point() +
labs(x = "urban height")
print(urban_height)
rural_height <- ggplot(height_df,
aes(x = Age.group,
y = Mean.Height..rural.,
colour = Sex,
fill = Sex,
alpha = 0.5)) +
geom_point() +
labs(x = "rural height")
print(rural_height)
urban_height <- ggplot(height_df,
aes(x = Age.group,
y = Mean.Height..urban.,
colour = Sex,
fill = Sex,
alpha = 0.5)) +
geom_point() +
labs(x = "Age",
y = "Height",
title = "Urban population")
print(urban_height)
rural_height <- ggplot(height_df,
aes(x = Age.group,
y = Mean.Height..rural.,
colour = Sex,
fill = Sex,
alpha = 0.5)) +
geom_point() +
labs(x = "Age",
y = "Height",
title = "Rural population")
print(rural_height)
